[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Comparing mgcv::bam with glmmLDTS for the modeling and prediction of spotted seal haul-out behavior",
    "section": "",
    "text": "The glmmLDTS package (Ver Hoef, London, and Boveng 2009) was developed and published over ten years ago and, at the time, provided a fast-computing solution for generalized linear mixed models with massive data sets and many repeated measures on subjects. While the package has general applicability, it was developed with behavioral observations from telemetry deployments on seals in mind (see example data in (Ver Hoef, London, and Boveng 2009) and analysis in (London et al. 2012)). In recent years, the mgcv package’s bam() model fitting function has emerged as a common solution for fitting similarly massive (if, even much more massive) data sets (Wood et al. 2017; Wood, Goude, and Shaw 2014; Li and Wood 2019). The bam() approach differs in that it fits a generalized additive model (GAM) and employs additional numerical methods designed for data sets containing upwards of several tens of thousands of data. The random effects are included as special penalized smooths. There is also support for AR1 structure in the model to account for temporal autocorrelation.\nInitial testing and exploration of the mgcv::bam() approach suggests that models taking a few hours to fit with glmmLDTS can be fit in just a few seconds with mgcv::bam(). Thus, there’s keen interest in understanding whether the results of the fits are comparable and if mgcv::bam() might provide an astonishing improvement in computation time without sacrificing important statistical considerations and applicability of the results.\nHere, we compare speed, model performance, and predictions of glmmLDTS and mgcv::bam() for a data set of spotted seal haul-out observations from deployed telemetry devices. The primary aim of this model is to describe haul-out behavior during the critical periods of pupping, breeding, and molting and to also provide estimate of availability during aerial surveys such that counts of seals can provide estimates of population abundance. The data set consists of 114,852 from deployments on 105 individual spotted seals."
  },
  {
    "objectID": "index.html#inspiration-objectives",
    "href": "index.html#inspiration-objectives",
    "title": "Comparing mgcv::bam with glmmLDTS for the modeling and prediction of spotted seal haul-out behavior",
    "section": "",
    "text": "The glmmLDTS package (Ver Hoef, London, and Boveng 2009) was developed and published over ten years ago and, at the time, provided a fast-computing solution for generalized linear mixed models with massive data sets and many repeated measures on subjects. While the package has general applicability, it was developed with behavioral observations from telemetry deployments on seals in mind (see example data in (Ver Hoef, London, and Boveng 2009) and analysis in (London et al. 2012)). In recent years, the mgcv package’s bam() model fitting function has emerged as a common solution for fitting similarly massive (if, even much more massive) data sets (Wood et al. 2017; Wood, Goude, and Shaw 2014; Li and Wood 2019). The bam() approach differs in that it fits a generalized additive model (GAM) and employs additional numerical methods designed for data sets containing upwards of several tens of thousands of data. The random effects are included as special penalized smooths. There is also support for AR1 structure in the model to account for temporal autocorrelation.\nInitial testing and exploration of the mgcv::bam() approach suggests that models taking a few hours to fit with glmmLDTS can be fit in just a few seconds with mgcv::bam(). Thus, there’s keen interest in understanding whether the results of the fits are comparable and if mgcv::bam() might provide an astonishing improvement in computation time without sacrificing important statistical considerations and applicability of the results.\nHere, we compare speed, model performance, and predictions of glmmLDTS and mgcv::bam() for a data set of spotted seal haul-out observations from deployed telemetry devices. The primary aim of this model is to describe haul-out behavior during the critical periods of pupping, breeding, and molting and to also provide estimate of availability during aerial surveys such that counts of seals can provide estimates of population abundance. The data set consists of 114,852 from deployments on 105 individual spotted seals."
  },
  {
    "objectID": "index.html#exploring-glmmldts-and-fit-results",
    "href": "index.html#exploring-glmmldts-and-fit-results",
    "title": "Comparing mgcv::bam with glmmLDTS for the modeling and prediction of spotted seal haul-out behavior",
    "section": "Exploring glmmLDTS and Fit Results",
    "text": "Exploring glmmLDTS and Fit Results\nThe model specification below was used to specify the glmmLDTS model\n\nfit_spotted &lt;- function(HO_spotted) {\n  glmmLDTS(fixed.formula = dry ~ age_sex + \n             sin1 + cos1 + sin2 + cos2 + sin3 + cos3 + \n             day + day2 + day3 + \n             temp2 + wind + pressure + precip + wind*temp2 +\n             sin1*day + cos1*day + \n             sin2*day + cos2*day + \n             sin3*day + cos3*day +\n             sin1*day2 + cos1*day2 + \n             sin2*day2 + cos2*day2 + \n             sin3*day2 + cos3*day2 +\n             age_sex:day + age_sex:day2 + age_sex:day3,\n           random.formula = dry ~ speno,\n           data = HO_spotted,\n           EstMeth = \"REML\",\n           timecol = \"time_vec\",\n           group.vec = \"ar1_id\")\n}\n\nAs a general description of the model, dry is a binomial term that indicates whether a seal was out of the water for the majority of a given hour. A collection of fixed effects predictors are included such as age and sex class, weather conditions determined from climate reanalysis (e.g. temperature, wind, precipitation), linear, quadratic, and cubic effects of day-of-year to represent temporal changes in behavior, and time of day as a continuous formulation based on Fourier series (sin1, cos1, sin2, …) that provides a flexible model while preserving the inherent circularity needed for time-of-day effects (i.e., hour 0 should be equal to hour 24). It also represents hour-of-day with 6 parameters, which is a considerable reduction when compared to a 24-parameter variable, especially when fitting models including interactions between hour-of-day and other variables (e.g., age-sex class, day-of-year). The random effect is speno (or seal identifier) which is further blocked into consecutive observations – the ar1_id specifies this grouping.\nExact timing for the fit isn’t recorded exactly in this document but, generally, 1-2 hours on an Apple M1 Silicon laptop has been the experience. Estimates of the fixed effects from the glmmLDTS model are provided below in Table 1.\n\n\n\n\n\n\nTable 1:  Preview of fixed effects from the glmmLDTS model \n  \n    \n    \n      \n      effect\n      levels\n      estimate\n      std.err\n      df\n      t.value\n      prob.t\n    \n  \n  \n    1\nintercept\n\n-0.41327860\n0.201099814\n114816\n-2.0550919\n0.03987\n    2\nage_sex\nADULT.F\n0.00000000\nNA\nNA\nNA\nNA\n    3\nage_sex\nADULT.M\n0.18240436\n0.284565230\n114816\n0.6409932\n0.52153\n    4\nage_sex\nSUBADULT\n-0.55061127\n0.250956643\n114816\n-2.1940494\n0.02823\n    5\nage_sex\nYOUNG OF YEAR\n1.79718140\n0.354398409\n114816\n5.0710764\n0.00000\n    6..42\n\n\n\n\n\n\n\n    43\nage_sex:day3\nYOUNG OF YEAR,\n0.02454129\n0.009527652\n114816\n2.5757968\n0.01000"
  },
  {
    "objectID": "index.html#exploring-mgcvbam-fit-results",
    "href": "index.html#exploring-mgcvbam-fit-results",
    "title": "Comparing mgcv::bam with glmmLDTS for the modeling and prediction of spotted seal haul-out behavior",
    "section": "Exploring mgcv::bam() Fit & Results",
    "text": "Exploring mgcv::bam() Fit & Results\nThe model specification below was used to specify the mgcv::bam() model\n\nm1 &lt;- mgcv::bam(\n  dry ~ age_sex + s(speno, bs = \"re\") + sin1 + cos1 + sin2 + cos2 + sin3 + \n    cos3 + day + day2+ day3 + temp2 + wind + pressure + precip + wind*temp2 +\n    sin1*day + cos1*day + sin2*day + cos2*day + sin3*day + cos3*day +\n    sin1*day2 + cos1*day2 + sin2*day2 + cos2*day2 + sin3*day2 + cos3*day2 +\n    age_sex:day + age_sex:day2 + age_sex:day3,\n  data = spotted_model_data,\n  family = binomial,\n  discrete = TRUE)\n\nThe initial model specification was meant to match the previous glmmLDTS model. The s(speno, bs = \"re\") term is the smooth term for the random effect. All other predictors are the same. Note, the specification for m1 here does not include any AR1 structure for temporal autocorrelation. To include this, we need to provide a value for \\(\\rho\\) (or rho). We can examine the autocorrelation within the model and use the lag-1 value for \\(\\rho\\) .\n\nlag1 &lt;- acf(resid(m1), plot=FALSE)[1][[1]]\n\nThe value for lag-1 autocorrelation is 0.825 which is rather high but not surprising. We can, now, update our model specification with a value for rho as well as the A1.start argument with specifies (TRUE/FALSE) the start point of each speno/block.\n\nm2 &lt;- mgcv::bam(\n  dry ~ age_sex + s(speno, bs = \"re\") + sin1 + cos1 + sin2 + cos2 + sin3 + \n    cos3 + day + day2+ day3 + temp2 + wind + pressure + precip + wind*temp2 +\n    sin1*day + cos1*day + sin2*day + cos2*day + sin3*day + cos3*day +\n    sin1*day2 + cos1*day2 + sin2*day2 + cos2*day2 + sin3*day2 + cos3*day2 +\n    age_sex:day + age_sex:day2 + age_sex:day3,\n  data = spotted_model_data,\n  family = binomial,\n  AR.start = ar1_start,\n  rho = lag1,\n  discrete = TRUE)\n\nTiming for the mgcv::bam() fit is approximately 4 seconds on an Apple M1 Silicon laptop. Estimates of the fixed effects from the mgcv::bam() model are provided below in Table 2.\n\n\n\n\n\n\nTable 2:  Preview of fixed effects from the bam model \n  \n    \n    \n      \n      term\n      estimate\n      std.error\n      statistic\n      p.value\n    \n  \n  \n    1\n(Intercept)\n-0.43313578\n0.200433909\n-2.1609905\n3.069607e-02\n    2\nage_sexADULT.M\n0.18630481\n0.283284097\n0.6576607\n5.107562e-01\n    3\nage_sexSUBADULT\n-0.54655452\n0.250793255\n-2.1793031\n2.930916e-02\n    4\nage_sexYOUNG OF YEAR\n1.76486256\n0.358761588\n4.9193186\n8.684601e-07\n    5\nsin1\n-0.08491735\n0.028073594\n-3.0248124\n2.487874e-03\n    6..38\n\n\n\n\n\n    39\nage_sexYOUNG OF YEAR:day3\n0.02517891\n0.009837341\n2.5595235\n1.048158e-02\n  \n  \n  \n\n\n\n\n\nThe estimates in Table 2 align quite well with those presented in Table 1. The same holds true for the estimates of standard error. This provides good indication that both approaches are interpreting the data in a very similar manner. There are, however, a few terms that are estimated as 0 in the mgcv::bam() model that have non-zero estimates in the glmmLDTS output ( see Table 3 ). Before recommending mgcv::bam() for this analysis, we need to understand why these terms are estimated as 0.\n\n\n\n\n\n\nTable 3:  Terms with zero estimate in the bam model \n  \n    \n    \n      term\n      estimate\n      std.error\n      statistic\n      p.value\n    \n  \n  \n    sin3\n0\n0\nNaN\nNaN\n    sin3:day\n0\n0\nNaN\nNaN\n    cos3:day2\n0\n0\nNaN\nNaN"
  },
  {
    "objectID": "index.html#comparing-prediction-estimates-and-confidence-intervals",
    "href": "index.html#comparing-prediction-estimates-and-confidence-intervals",
    "title": "Comparing mgcv::bam with glmmLDTS for the modeling and prediction of spotted seal haul-out behavior",
    "section": "Comparing Prediction Estimates and Confidence Intervals",
    "text": "Comparing Prediction Estimates and Confidence Intervals\nSo, it seems that both the original glmmLDTS approach and the mgcv::bam() approach can provide very similar fits with nearly identical coefficient estimates and standard errors. But, this is to be expected, I think, given that the glmm can be considered a special case of gam and the only smooth term included was for the random effect. The next area to explore is how the models might compare with respect to prediction estimates and the confidence intervals around those predictions.\nFor this prediction exercise, we’ll want to create a new data frame that includes all of the values we’d like to predict at. For this particular model, it’s a rather complex exercise and, thus, the complex function below (feel free to unfold the code block if interested).\n\n\nCode\ncreate_newdata &lt;- function(data, age_sex) {\n  df_list &lt;- vector(mode = \"list\", length = length({{age_sex}} ))\n\n  for (a_s in {{age_sex}}) {\n    range_yday &lt;- data %&gt;% filter(age_sex == a_s ) %&gt;%\n      summarize(start_day = min(yday),\n                end_day = max(yday))\n    start_day &lt;- range_yday$start_day\n    end_day &lt;- range_yday$end_day\n    n_days = (end_day - start_day) + 1\n\n    # for wx covariates we'll use a gam to get values by \n    # day/hour since wx is likely to vary w/in day over the season\n\n    gam.baro &lt;-\n      gam(pressure ~ s(yday), \n          data = data, \n          method = \"REML\")\n    gam.temp &lt;-\n      gam(temp2 ~ s(yday) + s(as.numeric(solar_hour)), \n          data = data, \n          method = \"REML\")\n    gam.wind &lt;-\n      gam(wind ~ s(yday) + s(as.numeric(solar_hour)), \n          data = data, \n          method = \"REML\")\n    gam.precip &lt;-\n      gam(precip ~ s(yday), \n          data = data, \n          method = \"REML\")\n\n    wx_new_data &lt;- data.frame(\n      solar_hour = rep(0:23, each = n_days),\n      yday = rep(start_day:end_day, times = 24)\n    )\n\n    temp_pred &lt;- predict(gam.temp, newdata = wx_new_data)\n    wind_pred &lt;- predict(gam.wind, newdata = wx_new_data)\n    baro_pred &lt;- predict(gam.baro, newdata = wx_new_data)\n    precip_pred &lt;- predict(gam.precip, newdata = wx_new_data)\n\n    df &lt;- data.frame(\n      age_sex = a_s,\n      solar_hour = rep(0:23, each = n_days),\n      yday = rep(start_day:end_day, times = 24),\n      northing = mean(data$northing),\n      temp2 = temp_pred,\n      wind = wind_pred,\n      pressure = baro_pred,\n      precip = precip_pred\n    ) %&gt;%\n      mutate(\n        sin1 = sin(pi * solar_hour / 12),\n        cos1 = cos(pi * solar_hour / 12),\n        sin2 = sin(pi * solar_hour / 6),\n        cos2 = cos(pi * solar_hour / 6),\n        sin3 = sin(pi * solar_hour / 4),\n        cos3 = sin(pi * solar_hour / 4),\n      ) %&gt;%\n      mutate(day = (yday - 120) / 10,\n             day2 = day ^ 2,\n             day3 = day ^ 3)\n    df_list[[a_s]] &lt;- df\n  }\n  if(length({{age_sex}}) &gt; 1) {\n    df_out &lt;- bind_rows(df_list) %&gt;%\n      mutate(age_sex = forcats::fct_relevel(\n        age_sex,c(\"ADULT.F\",\"ADULT.M\",\"SUBADULT\",\"YOUNG OF YEAR\"))\n      )\n  } else {\n    df_out &lt;- bind_rows(df_list)\n  }\n}\n\nspotted_newdata &lt;- create_newdata(\n  data = spotted_fit_glmm$dataset,\n  age_sex = levels(spotted_fit_glmm$dataset$age_sex)\n  )\n\n\n\nPredicting from the glmmLDTS model\nNow, we need a function to predict from the glmmLDTS model. This isn’t an included function within the package so we’ll create our own.\n\n\nCode\npredict.glmmLDTS &lt;- function(glmmLDTS_model, newdata,\n                             type = \"response\") {\n# create the model matrix\n  spotted_mm &lt;- model.matrix(glmmLDTS_model$fixed.formula[-2],\n                            data = newdata)\n\n  #clean up extra intercept and get coef\n  fit_coef &lt;- glmmLDTS_model$fixed.effects %&gt;%\n    filter(!is.na(std.err)) %&gt;%\n    pull(estimate)\n\n  predicts &lt;-  \n    tibble(logit_fits = as.vector(spotted_mm %*% fit_coef)) %&gt;% \n    mutate(logit_fits_se = sqrt(diag(\n             spotted_mm %*% glmmLDTS_model$covb %*% t(spotted_mm)\n             )),\n           logit_fits_lo95 = logit_fits - 1.96*logit_fits_se,\n           logit_fits_up95 = logit_fits + 1.96*logit_fits_se,\n           ho_prob = plogis(spotted_mm %*% fit_coef),\n           lower95 = plogis(logit_fits_lo95),\n           upper95 = plogis(logit_fits_up95)\n    )\n  return(predicts)\n}\n\nspotted_newdata &lt;- spotted_newdata %&gt;% \n  dplyr::bind_cols(\n    predict.glmmLDTS(spotted_fit_glmm, spotted_newdata)\n    )\n\n\n\n\nPredicting from the mgcv::bam() model\nThe mgcv package includes a predict() function for us, so we can proceed directly to prediction using our spotted_newdata and bind the results. The predict.bam() function requires a column for speno even though we are excluding the random effect (s(speno)) from the model prediction. As with the glmmLDTS prediction exercise, we’ll specify type = \"link\" and calculate our confidence intervals directly.\n\nspenos &lt;- unique(spotted_model_data$speno) %&gt;% \n  as.character()\n\nspotted_newdata &lt;- spotted_newdata %&gt;% \n  mutate(speno = sample(spenos,1))\n\nspotted_newdata &lt;- spotted_newdata %&gt;%\n  bind_cols(\n    predict(\n      m2,\n      spotted_newdata,\n      type = \"link\",\n      se.fit = TRUE,\n      exclude = \"s(speno)\"\n    ) %&gt;%\n      as_tibble()\n  ) %&gt;%\n  rename(fit_bam = fit, se_bam = se.fit) %&gt;%\n  mutate(\n    logit_bam_lo95 = fit_bam - 1.96 * se_bam,\n    logit_bam_up95 = fit_bam + 1.96 * se_bam,\n    ho_prob_bam = plogis(fit_bam),\n    lower95_bam = plogis(logit_bam_lo95),\n    upper95_bam = plogis(logit_bam_up95)\n  )\n\nNow, with predictions from both model approaches in hand, we can visualize the comparison of predictions and associated standard errors (Figure 1).\n\n\nCode\nggplot(data = spotted_newdata) +\n  geom_point(aes(x = ho_prob, y = ho_prob_bam),\n             alpha = 0.1) +\n  geom_abline(slope = 1, intercept = 0) +\n  coord_cartesian() +\n  xlab(\"Predicted HO Probability - glmmLDTS\") +\n  ylab(\"Predicted HO Probability - mgcv::bam\") +\n  ggtitle(\"Comparing Predicted Haul-out Probability\",\n          subtitle = \"values shown are on the response scale\") +\n  theme_minimal() + theme(legend.position = \"none\")\n\n\n\n\n\nFigure 1: XY plot comparing the predicted haul-out probability (response scale) for the same data between the glmmLDTS model fit and the mgcv::bam() model fit\n\n\n\n\nThis looks great!\nNow, let’s visualize the predictions with a heat map (Figure 2) that depicts haul-out probability changes over the season and hour of day for each of our age and sex classes.\n\n\nCode\nplot_df &lt;- spotted_newdata %&gt;%\n  mutate(date = lubridate::as_date(yday, origin = \"2015-01-01\"),\n         month = lubridate::month(date,label=TRUE),\n         day = lubridate::day(date)) %&gt;%\n  filter(!month %in% c(\"Jul\",\"Aug\"))\n\np1 &lt;- ggplot(plot_df, aes(day, solar_hour, fill = ho_prob)) +\n  geom_tile(color = \"white\", linewidth = 0) +\n  scale_fill_gradientn(\n    colors = rev(met.brewer(\"Hiroshige\")),\n    name = \"haul-out probability\",\n    aesthetics = \"fill\",\n    limits = c(0, 1),\n    breaks = c(0.25, 0.50, 0.75),\n    guide = guide_colorbar(\n      title.position = \"bottom\",\n      barwidth = 15,\n      barheight = 0.5,\n      title.hjust = 0.5\n    )\n  )\n\np1 &lt;- p1 + facet_grid(age_sex~month)\np1 &lt;- p1 + scale_x_continuous(breaks = c(1,10,20,30)) +\n  scale_y_continuous(breaks = c(4,12,20))\np1 &lt;- p1 + theme(legend.position = \"bottom\") +\n  theme(strip.background = element_rect(colour=\"white\")) +\n  theme(axis.ticks=element_blank()) +\n  xlab(\"day of month\") + ylab(\"local solar hour\") +\n  ggtitle(\"Spotted seal haul-out predictions - glmmLDTS\")\n\n\np2 &lt;- ggplot(plot_df, aes(day, solar_hour, fill = ho_prob_bam)) +\n  geom_tile(color = \"white\", linewidth = 0) +\n  scale_fill_gradientn(\n    colors = rev(met.brewer(\"Hiroshige\")),\n    name = \"haul-out probability\",\n    aesthetics = \"fill\",\n    limits = c(0, 1),\n    breaks = c(0.25, 0.50, 0.75),\n    guide = guide_colorbar(\n      title.position = \"bottom\",\n      barwidth = 15,\n      barheight = 0.5,\n      title.hjust = 0.5\n    )\n  )\np2 &lt;- p2 + facet_grid(age_sex~month)\np2 &lt;- p2 + scale_x_continuous(breaks = c(1,10,20,30)) +\n  scale_y_continuous(breaks = c(4,12,20))\np2 &lt;- p2 + theme(legend.position = \"bottom\") +\n  theme(strip.background = element_rect(colour=\"white\")) +\n  theme(axis.ticks=element_blank()) +\n  xlab(\"day of month\") + ylab(\"local solar hour\") +\n  ggtitle(\"Spotted seal haul-out predictions - mgcv::bam\")\n\np1/p2\n\n\n\n\n\nFigure 2: Heat maps showing the predicted haul-out probability (response scale) variability over the season and within day for the same data between the glmmLDTS model fit and the mgcv::bam() model fit\n\n\n\n\nThat looks great, too!\nSo far, we’ve shown that the model estimates, associated standard errors, and prediction values for haul-out probability are very similar between the glmmLDTS and mgcv::bam() approach. The final comparison to evaluate is the prediction standard errors. We’ll start with an XY plot similar to what we did for the prediction estimates.\n\n\nCode\nggplot(data = spotted_newdata) +\n  geom_point(aes(x = logit_fits_se, y = se_bam),\n             alpha = 0.1) +\n  geom_abline(slope = 1, intercept = 0) +\n  coord_cartesian() + ylim(c(0,NA)) + xlim(c(0,NA)) +\n  xlab(\"Prediction Standard Error - glmmLDTS\") +\n  ylab(\"Prediction Standard Error - mgcv::bam\") +\n  ggtitle(\"Comparing Prediction Standard Errors\",\n          subtitle = \"values shown are on the logit scale, not response\") +\n  theme_minimal() + theme(legend.position = \"none\")\n\n\n\n\n\nXY plot comparing the predicted standard errors (link scale) for the same data between the glmmLDTS model fit and the mgcv::bam() model fit\n\n\n\n\nJust like the other comparisons, this also looks very promising. As a final visualization, let’s fix the solar_hour parameter to noon and compare predictions and standard errors for both models across age and sex class.\n\np3 &lt;- ggplot(plot_df %&gt;% filter(solar_hour == 12), aes(date,ho_prob)) +\n  geom_ribbon(aes(ymin=lower95,ymax=upper95), fill = \"grey30\", alpha = 0.3) +\n  geom_line(aes(date,ho_prob)) +\n  geom_ribbon(aes(ymin=lower95_bam,ymax=upper95_bam), fill = \"orange\", alpha = 0.3) +\n  geom_line(aes(date, ho_prob_bam), color = \"orange\") +\n  facet_grid(. ~ age_sex) +\n  xlab(\"day or year\") +\n  ylab(\"haul-out probability\") +\n  ggtitle(\"Comparing Predictions & Standard Errors\",\n          subtitle = \"glmmLDTS is the darker shaded region and orange is mgcv::bam\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n\np3\n\n\n\n\nFigure 3: Comparison of predictions and standard errors for the glmmLDTS model (darker shade) and the mgcv::bam() model (orange). Solar hour was fixed at noon\n\n\n\n\nSo, it seems we can adopt mgcv::bam() as a nearly drop-in replacement for glmmLDTS and gain an astonishing decrease in computation time."
  },
  {
    "objectID": "index.html#what-about-a-more-gambam-centric-approach",
    "href": "index.html#what-about-a-more-gambam-centric-approach",
    "title": "Comparing mgcv::bam with glmmLDTS for the modeling and prediction of spotted seal haul-out behavior",
    "section": "What About a More GAM/BAM-centric Approach",
    "text": "What About a More GAM/BAM-centric Approach\nUp to this point, the focus has been on comparing the same model specification (other than the approach for including random effects) between glmmLDTS and mgcv::bam(). However, a more GAM-like approach to mgcv::bam() might rely on a different specification that includes more smooth terms and such.\nThat might be interesting to explore while we are at it. The mgcv pacakge provides a range of options for specifying smooths within the model. For the environmental covariates, we’ll specify a simple cubic spline with a shrinkage component (bs = \"cs\"). For the day of year (yday) we’ll specify a cubic spline that varies by age and sex class (bs = \"cr\", by=age_sex) and for solar hour we’ll specify a circular spline (bs=\"cc\"). Interactions are handled as tensor product smooths. It wasn’t clear whether the te() approach or ti() would be best so both are fit and tested with AIC.\n\nspotted_model_data &lt;- spotted_model_data %&gt;% \n  mutate(solar_hour = as.integer(solar_hour),\n         wind_chill = wind*temp2)\n\n\nm5ti &lt;- mgcv::bam(\n  dry ~ s(speno, bs = \"re\") +\n    s(yday, bs=\"cr\",by=age_sex)+ s(solar_hour, bs=\"cc\")+\n    ti(yday, solar_hour, bs=c(\"cr\",\"cc\")) + age_sex +\n  s(precip, bs = \"cs\") + s(temp2, bs = \"cs\") +\n  s(wind, bs = \"cs\") + s(wind_chill) + s(pressure, bs = \"cs\"),\n  data = spotted_model_data,\n  family = binomial,\n  AR.start = ar1_start,\n  rho = lag1,\n  discrete = TRUE\n)\n\nm5te &lt;- mgcv::bam(\n  dry ~ s(speno, bs = \"re\") +\n    te(yday, solar_hour,bs=c(\"cr\",\"cc\"), by=age_sex) + age_sex +\n  s(precip, bs = \"cs\") + s(temp2, bs = \"cs\") +\n  s(wind, bs = \"cs\") + s(wind_chill) + s(pressure, bs = \"cs\"),\n  data = spotted_model_data,\n  family = binomial,\n  AR.start = ar1_start,\n  rho = lag1,\n  discrete = TRUE\n)\n\n\nAIC(m5ti, m5te)\n\n           df       AIC\nm5ti 156.3481 -27113.15\nm5te 166.9104 -26372.41\n\n\nOk, looks like the ti() approach is favored. Now, let’s do some predictions!\n\nspotted_newdata &lt;- spotted_newdata %&gt;% \n  mutate(wind_chill = wind*temp2)\n\nm5_predict &lt;- predict(\n      m5ti,\n      spotted_newdata,\n      type = \"link\",\n      se.fit = TRUE,\n      exclude = \"s(speno)\"\n    ) %&gt;%\n      as_tibble() %&gt;% \n  rename(fit_bam2 = fit, se_bam2 = se.fit) %&gt;% \n  mutate(\n    logit_bam2_lo95 = fit_bam2 - 1.96 * se_bam2,\n    logit_bam2_up95 = fit_bam2 + 1.96 * se_bam2,\n    ho_prob_bam2 = plogis(fit_bam2),\n    lower95_bam2 = plogis(logit_bam2_lo95),\n    upper95_bam2 = plogis(logit_bam2_up95)\n  )\n\nspotted_newdata &lt;- spotted_newdata %&gt;% \n  bind_cols(m5_predict)\n\nAnd, visualize those predictions similar to our other plots\n\n\nCode\nplot_df &lt;- spotted_newdata %&gt;%\n  mutate(date = lubridate::as_date(yday, origin = \"2015-01-01\"),\n         month = lubridate::month(date,label=TRUE),\n         day = lubridate::day(date)) %&gt;%\n  filter(!month %in% c(\"Jul\",\"Aug\"))\n\np1 &lt;- ggplot(plot_df, aes(day, solar_hour, fill = ho_prob_bam2)) +\n  geom_tile(color = \"white\", linewidth = 0) +\n  scale_fill_gradientn(\n    colors = rev(met.brewer(\"Hiroshige\")),\n    name = \"haul-out probability\",\n    aesthetics = \"fill\",\n    limits = c(0, 1),\n    breaks = c(0.25, 0.50, 0.75),\n    guide = guide_colorbar(\n      title.position = \"bottom\",\n      barwidth = 15,\n      barheight = 0.5,\n      title.hjust = 0.5\n    )\n  )\n\np1 &lt;- p1 + facet_grid(age_sex~month)\np1 &lt;- p1 + scale_x_continuous(breaks = c(1,10,20,30)) +\n  scale_y_continuous(breaks = c(4,12,20))\np1 &lt;- p1 + theme(legend.position = \"bottom\") +\n  theme(strip.background = element_rect(colour=\"white\")) +\n  theme(axis.ticks=element_blank()) +\n  xlab(\"day of month\") + ylab(\"local solar hour\") +\n  ggtitle(\"Spotted seal haul-out predictions - mgcv::bam with smooths\")\n\np1\n\n\n\n\n\nFigure 4: Heat map showing the predicted haul-out probability (response scale) variability over the season and within day from the mgcv::bam() with smooths model fit\n\n\n\n\nThat’s not so bad and, actually, pretty good given the very different approach. I imagine it speaks to the strong signal in the underlying data. An interesting aspect of this result is that we, now, see a period of increased haul-out behavior in adult females that coincides with pupping and nursing. There’s also an increased signal for adult males in that time that would coincide with their courting behavior and hauling out with nursing females. The previous linear model approach doesn’t emphasize these features.\n\n\nCode\np3 &lt;- ggplot(plot_df %&gt;% filter(solar_hour == 12), aes(date,ho_prob)) +\n  geom_ribbon(aes(ymin=lower95,ymax=upper95), fill = \"grey30\", alpha = 0.3) +\n  geom_line(aes(date,ho_prob)) +\n  geom_ribbon(aes(ymin=lower95_bam2,ymax=upper95_bam2), fill = \"orange\", alpha = 0.3) +\n  geom_line(aes(date, ho_prob_bam2), color = \"orange\") +\n  facet_grid(. ~ age_sex) +\n  xlab(\"day or year\") +\n  ylab(\"haul-out probability\") +\n  ggtitle(\"Comparing Predictions & Standard Errors\",\n          subtitle = \"glmmLDTS is the darker shaded region and orange is mgcv::bam with smooths\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n\np3\n\n\n\n\n\nFigure 5: Comparison of predictions and standard errors for the glmmLDTS model (darker shade) and the mgcv::bam() with smooths model (orange). Solar hour was fixed at noon\n\n\n\n\nThere is, clearly, some extra ‘wiggliness’ in this approach and worth discussion regarding whether there’s too much and we’re over-fitting. Though, the connection between the observed fit and what we know about the ecology of spotted seals is important to note."
  }
]